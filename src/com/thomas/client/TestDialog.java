/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.thomas.client;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.util.CellRangeAddress;

import com.thomas.data.ConstantValue;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelFuture;

/**
 *
 * @author 123456
 */
public class TestDialog extends javax.swing.JFrame {
	private static final long serialVersionUID = 1421207554875564884L;
	public static ExcelReader tileInfo = new ExcelReader();
	public static int curcardcode = 0;
	public SerialCommNew serialCommNew;
	public int index = 1;
	public Object[][] data = new Object[][] { 
		{ "1 装置", null, null, null, null }, 
		{ "2 配码", null, null, null, null }, 
		{ "3 电压", null, null, null, null },
		{ "4 无线", null, null, null, null },
		{ "5 左边", null, null, null, null }, 
		{ "6 右边", null, null, null, null }, 
		{ "7 姿势", null, null, null, null }, 
		{ "8 总结果", null, null, null, null } };
		
	public boolean ifOpenPort = false;
	public boolean ifShowResult = false;
	public List<Integer> list1 = new ArrayList<Integer>();// 自个儿功率
	public List<Integer> list3 = new ArrayList<Integer>();// 左邻居儿功率
	public List<Integer> list4 = new ArrayList<Integer>();// 右邻居功率
	public List<Integer> list2 = new ArrayList<Integer>();// 姿势
	public int count = 0;// 主机上报牌信息 间隔计数 11个间隔中含10个牌自身 左邻居 右邻居
	public int r2 = 0;
	public int s2 = 0;
	public int r3 = 0;
	public int s3 = 0;
	private String log = "";
	public static int state;
	public static int mstate;
	public int startIndex = 0;
	public static String com = "";
	
    /**
     * Creates new form TestDialog
     */
    public TestDialog() {
    	getConfigXml();
        initComponents();
        setState1(state);
        setState2(mstate);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton7 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PCB测试软件");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(1200, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 100));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("配置器状态:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel4.setForeground(java.awt.Color.red);
        jLabel4.setText("未启动");
        jLabel4.setPreferredSize(new java.awt.Dimension(80, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel5.setText("采集器状态:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel6.setForeground(java.awt.Color.red);
        jLabel6.setText("未启动");
        jLabel6.setPreferredSize(new java.awt.Dimension(80, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jLabel6, gridBagConstraints);

        jLabel7.setText("起始编号");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jLabel7, gridBagConstraints);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        jSpinner1.setMinimumSize(new java.awt.Dimension(100, 24));
        jSpinner1.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jSpinner1, gridBagConstraints);

        jButton7.setText("应用");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jButton7, gridBagConstraints);

        jLabel1.setText("串口选择");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        jTextField1.setText(com);
        jTextField1.setMinimumSize(new java.awt.Dimension(100, 24));
        jTextField1.setPreferredSize(new java.awt.Dimension(100, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jTextField1, gridBagConstraints);

        jButton1.setText("开始测试");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(1200, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(1200, 50));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("测试项");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 80, 0, 80);
        jPanel2.add(jLabel2, gridBagConstraints);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("板1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 80, 0, 90);
        jPanel2.add(jCheckBox1, gridBagConstraints);

        jCheckBox2.setSelected(true);
        jCheckBox2.setText("板2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 90, 0, 90);
        jPanel2.add(jCheckBox2, gridBagConstraints);

        jCheckBox3.setSelected(true);
        jCheckBox3.setText("板3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 90, 0, 90);
        jPanel2.add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setSelected(true);
        jCheckBox4.setText("板4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 90, 0, 80);
        jPanel2.add(jCheckBox4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jPanel2, gridBagConstraints);

        jScrollPane2.setBorder(null);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(1180, 350));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(1180, 350));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1 装置", null, null, null, null},
                {"2 配码", null, null, null, null},
                {"3 电压", null, null, null, null},
                {"4 无线", null, null, null, null},
                {"5 左边", null, null, null, null},
                {"6 右边", null, null, null, null},
                {"7 姿势", null, null, null, null},
                {"8 总结果", null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(40);
        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(jScrollPane2, gridBagConstraints);

        jPanel4.setMinimumSize(new java.awt.Dimension(1180, 150));
        jPanel4.setPreferredSize(new java.awt.Dimension(1180, 150));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel3.setMinimumSize(new java.awt.Dimension(1200, 50));
        jPanel3.setPreferredSize(new java.awt.Dimension(1200, 50));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jButton2.setText("串口开启");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new java.awt.GridBagConstraints());

        jButton4.setText("配码器");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4, new java.awt.GridBagConstraints());

        jButton5.setText("启动");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton5, new java.awt.GridBagConstraints());

        jButton6.setText("停止");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton6, new java.awt.GridBagConstraints());

        jButton3.setText("串口停止");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        getContentPane().add(jPanel3, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    	try {
			setConfigXml();
		} catch (DocumentException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		if (serialCommNew != null) {
			serialCommNew.Stop();
		}
    }//GEN-LAST:event_formWindowClosed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    	if (!ifOpenPort) {
			openPort();
			if (!ifOpenPort) {
				return;
			}
		}
    	clearTable();
    	index = 1;
		if (jCheckBox1.isSelected()) {
			index = 1;
		} else if (jCheckBox2.isSelected()) {
			index = 2;
		} else if (jCheckBox3.isSelected()) {
			index = 3;
		} else if (jCheckBox4.isSelected()) {
			index = 4;
		}
		doStep1(index);// 电脑串口发测试命令
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    	doStep1(5);// 最后发一个05表示结束
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    	index = 1;
		if (jCheckBox1.isSelected()) {
			index = 1;
		} else if (jCheckBox2.isSelected()) {
			index = 2;
		} else if (jCheckBox3.isSelected()) {
			index = 3;
		} else if (jCheckBox4.isSelected()) {
			index = 4;
		}
    	doStep2(index);// 电脑to配码器发配码命令
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
    	index = 1;
		if (jCheckBox1.isSelected()) {
			index = 1;
		} else if (jCheckBox2.isSelected()) {
			index = 2;
		} else if (jCheckBox3.isSelected()) {
			index = 3;
		} else if (jCheckBox4.isSelected()) {
			index = 4;
		}
		doStep3();// 电脑to采集器发牌启动命令
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
    	index = 1;
		if (jCheckBox1.isSelected()) {
			index = 1;
		} else if (jCheckBox2.isSelected()) {
			index = 2;
		} else if (jCheckBox3.isSelected()) {
			index = 3;
		} else if (jCheckBox4.isSelected()) {
			index = 4;
		}
		doStep4();// 电脑to采集器发牌停止命令
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
		startIndex = (int) jSpinner1.getValue();
		JOptionPane.showMessageDialog(this, "应用成功", "配置起始编号", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton7ActionPerformed
    
	private void openPort() {
		try {
			if (jTextField1.getText().trim().length() == 0) {
				JOptionPane.showMessageDialog(null, "请输入串口！！！", "错误", JOptionPane.ERROR_MESSAGE);
				return;
			}
			TileSetStatus.tileSetStatusInstance = TileSetStatus.SelectTileSet("Majiang");
			if (TileSetStatus.tileSetStatusInstance != null) {
				serialCommNew = new SerialCommNew(jTextField1.getText(), 0, TileSetStatus.tileSetStatusInstance);
				new Thread(serialCommNew).start();
			}
			ifOpenPort = true;
			log += "打开串口成功\n";
			jTextArea1.setText(log);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
		if (!ifOpenPort) {
			openPort();
			if (!ifOpenPort) {
				return;
			}
		}
		clearTable();
		index = 1;
		if (jCheckBox1.isSelected()) {
			index = 1;
		} else if (jCheckBox2.isSelected()) {
			index = 2;
		} else if (jCheckBox3.isSelected()) {
			index = 3;
		} else if (jCheckBox4.isSelected()) {
			index = 4;
		}
		log = "开始测试板" + index + "\n";
		jTextArea1.setText(log);
		doStep1(index);// 电脑串口发测试命令
	}

	private void doStep1(int index) {
		System.out.println("begin doStep1 index is " + index);
		try {
			byte[] buffer = new byte[7];
			buffer[0] = (byte) 0xfc;
			buffer[1] = (byte) 0xfc;
			buffer[2] = (byte) 0xfc;
			buffer[3] = (byte) 0xfc;
			buffer[4] = (byte) 0x2;
			buffer[5] = (byte) 0x4;
			buffer[6] = (byte) index;
			if (!ifOpenPort) {
				openPort();
				if (!ifOpenPort) {
					return;
				}
			}
			serialCommNew.SendData(buffer, 0, buffer.length);
			log += "下发串口命令成功\n";
			jTextArea1.setText(log);
			JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
			scrollBar.setValue(scrollBar.getMaximum());
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("end doStep1 index is " + index);
	}

	public void ReceiveStep1() {
		System.out.println("ReceiveStep1 index is " + index);
		log += "收到串口应答\n";
		jTextArea1.setText(log);
		JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
		scrollBar.setValue(scrollBar.getMaximum());
		data[0][index] = "通过";
		updateTable();
		doStep2(index);// 电脑to配码器发配码命令
	}

	private void doStep2(int index) {
		System.out.println("begin doStep2 index is " + index);
		try {
			// 下发命令
			ChannelFuture cf = ClientMain.loginWin.getChannelFuture();
			ByteBuf cmdBuf = cf.channel().alloc().buffer();

			cmdBuf.writeShort(ConstantValue.USERTYPE);
			cmdBuf.writeShort(ConstantValue.CONFIGCODECMD); // 命令号
			cmdBuf.writeShort(ConstantValue.NULLREC);
			cmdBuf.writeBytes(ConstantValue.strUserName.getBytes());// 10 bytes

			cmdBuf.writeByte(52);//主机ID

			// 牌副码
			cmdBuf.writeByte(0);
			String card = "01";// 写死
			ArrayList<Integer> tilelist = getTileParameter(card);

			// 当前配置牌ID
			curcardcode = tilelist.get(0);

			// 牌码
			cmdBuf.writeByte(curcardcode);
			// 测试用
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(0).get("牌中心频点整数部分"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(1).get("牌中心频点小数部分"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(2).get("牌deviation"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(3).get("牌RX Filter"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(4).get("牌工作address"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(5).get("牌TX Power"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(6).get("WOR唤醒间隔"), 16));
			cmdBuf.writeShort(tilelist.get(2));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(7).get("T0"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(8).get("T1-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(9).get("T2-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(10).get("T3-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(11).get("T4-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(12).get("T5-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(13).get("T6-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(14).get("T7-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(15).get("T8-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(16).get("T9-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(17).get("T10-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(18).get("T11-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(19).get("T12-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(20).get("T13-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(21).get("T14-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(22).get("T15-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(23).get("T16-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(24).get("T17-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(25).get("T18-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(26).get("T19-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(27).get("T20-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(28).get("T21-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(29).get("T22-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(30).get("T23-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(31).get("T24-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(32).get("T25-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(33).get("T26-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(34).get("T27-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(35).get("T28-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(36).get("T29-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(37).get("T30-A"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(38).get("T1-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(39).get("T2-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(40).get("T3-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(41).get("T4-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(42).get("T5-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(43).get("T6-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(44).get("T7-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(45).get("T8-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(46).get("T9-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(47).get("T10-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(48).get("T11-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(49).get("T12-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(50).get("T13-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(51).get("T14-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(52).get("T15-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(53).get("T16-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(54).get("T17-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(55).get("T18-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(56).get("T19-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(57).get("T20-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(58).get("T21-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(59).get("T22-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(60).get("T23-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(61).get("T24-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(62).get("T25-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(63).get("T26-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(64).get("T27-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(65).get("T28-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(66).get("T29-B"), 16));
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(67).get("T30-B"), 16));
			cmdBuf.writeShort(tilelist.get(1));// 互感选边码
			cmdBuf.writeShort(Integer.parseInt(tileInfo.list2.get(68).get("互感次数"), 16));
			cmdBuf.writeShort(tilelist.get(3));
			cmdBuf.writeShort(tilelist.get(4));
			cmdBuf.writeShort(tilelist.get(5));
			cmdBuf.writeShort(tilelist.get(6));
			cmdBuf.writeShort(tilelist.get(7));
			cmdBuf.writeShort(tilelist.get(8));
			cmdBuf.writeShort(tilelist.get(9));
			cmdBuf.writeShort(tilelist.get(10));
			cmdBuf.writeShort(tilelist.get(11));
			cmdBuf.writeShort(tilelist.get(12));
			cmdBuf.writeShort(tilelist.get(13));

			// 测试结束
			cmdBuf.writeInt(0xFBFEBFEF);

			cf.channel().writeAndFlush(cmdBuf);
			log += "下发配置器命令成功\n";
			jTextArea1.setText(log);
			JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
			scrollBar.setValue(scrollBar.getMaximum());

		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("end doStep2 index is " + index);
	}

	/**
	 * 配置牌成功后刷新牌的状态
	 * 
	 * @param cardcode
	 */
	public void ReceiveStep2(int voltage) {
		System.out.println("begin ReceiveStep2 index is " + index);
		log += "收到配置器应答\n";
		jTextArea1.setText(log);
		JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
		scrollBar.setValue(scrollBar.getMaximum());
		String strVol = String.format("%1.2f", (float) ((float) voltage / 255));
		System.out.println("ReceiveStep2 strVol is " + strVol);
		System.out.println("end ReceiveStep2 index is " + index);

		data[1][index] = "通过";
		if (voltage >= 765 && voltage <= 892) {
			data[2][index] = "通过";
		} else {
			data[2][index] = "不通过";
		}
		updateTable();

		doStep3();// 电脑to采集器发牌启动命令
	}

	/**
	 * 牌启动
	 */
	private void doStep3() {
		System.out.println("begin doStep3 index is " + index);
		try {
			ChannelFuture cf = ClientMain.loginWin.getChannelFuture();
			ByteBuf cmdBuf2 = cf.channel().alloc().buffer();
			cmdBuf2.writeShort(ConstantValue.USERTYPE);
			cmdBuf2.writeShort(ConstantValue.WAKEUPCARD);
			cmdBuf2.writeShort(ConstantValue.NULLREC);
			cmdBuf2.writeBytes(ConstantValue.strUserName.getBytes());// 10 bytes
			cmdBuf2.writeInt(0xFBFEBFEF);

			cf.channel().writeAndFlush(cmdBuf2);
			log += "下发启动命令成功\n";
			jTextArea1.setText(log);
			JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
			scrollBar.setValue(scrollBar.getMaximum());
			
			ifShowResult = false;
			count = 0;
			r2 = 0;
			s2 = 0;
			r3 = 0;
			s3 = 0;
			list1 = new ArrayList<Integer>();
			list3 = new ArrayList<Integer>();
			list4 = new ArrayList<Integer>();
			list2 = new ArrayList<Integer>();
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("end doStep3 index is " + index);
	}

	/**
	 * 主机上报牌信息
	 * @param iPower 
	 * @param iZDirection 
	 * @param iDirection 
	 * @param bNeighbor2 
	 * @param bNeighbor1 
	 * @param bTileValue 
	 * @param sTileSetid 
	 * 
	 * @param cmdbody
	 */
	public void ReceiveStep3(int sTileSetid, int bTileValue, int bNeighbor1, int bNeighbor2, int iDirection, int iZDirection, int iPower) {
		System.out.println("begin ReceiveStep3 index is " + index);
		log += "收到上报信息\n";
		jTextArea1.setText(log);
		JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
		scrollBar.setValue(scrollBar.getMaximum());
		if ((sTileSetid & 0xFF) == 0x2E && (bTileValue & 0xFF) == 0x37 && (bNeighbor1 & 0xFF) == 0x3A && (bNeighbor2 & 0xFF) == 0x5B) {// 间隔
			count++;
			System.out.println("count is " + count);
			if (count >= 11 && !ifShowResult) {
				ifShowResult = true;
				try {
					System.out.println("list1 is " + list1);
					System.out.println("list2 is " + list2);
					data[3][index] = setPower();
					data[4][index] = setNeighbor1();
					data[5][index] = setNeighbor2();
					data[6][index] = setDirection();
					data[7][index] = setResult();

					updateTable();
				} catch (Exception e) {
					e.printStackTrace();
				} finally {
					doStep4();// 电脑to采集器发牌停止命令
				}
			}
			return;
		}

		if ((bTileValue & 0xFF) == 0x1) {
			if (bNeighbor1 == 2) {
				r2++;
			} else if (bNeighbor1 == 3) {
				r3++;
			}
			if (bNeighbor2 == 2) {
				r2++;
			} else if (bNeighbor2 == 3) {
				r3++;
			}
			list2.add(iDirection);
			list1.add(iPower);
		} else if ((bTileValue & 0xFF) == 0x2) {
			if (bNeighbor1 == 0 && bNeighbor2 == 1 || bNeighbor1 == 1 && bNeighbor2 == 0) {
				s2++;
			}
			list3.add(iPower);
		} else if ((bTileValue & 0xFF) == 0x3) {
			if (bNeighbor1 == 0 && bNeighbor2 == 1 || bNeighbor1 == 1 && bNeighbor2 == 0) {
				s3++;
			}
			list4.add(iPower);
		}
		System.out.println("end ReceiveStep3 index is " + index);
	}

	private String setPower() {
		if (list1.size() < 9) {
			return "不通过(返回次数" + list1.size() + "," + list3.size() + "," + list4.size() + ")";
		}
		for (int i : list1) {
			if (i < -50) {
				return "不通过(小于-50)";
			}
		}
		return "通过(返回次数" + list1.size() + "," + list3.size() + "," + list4.size() + ")";
	}

	private String setNeighbor1() {
		if (r2 < 9 || s2 < 9) {
			return "不通过(R=" + r2 + " S=" + s2 + ")";
		}
		return "通过(R=" + r2 + " S=" + s2 + ")";
	}

	private String setNeighbor2() {
		if (r3 < 9 || s3 < 9) {
			return "不通过(R=" + r3 + " S=" + s3 + ")";
		}
		return "通过(R=" + r3 + " S=" + s3 + ")";
	}

	private String setDirection() {
		if (list2.size() < 9) {
			return "不通过(返回次数" + list2.size() + ")";
		}
		for (int i : list2) {
			if (i != ConstantValue.STAND1) {
				return "不通过";
			}
		}
		return "通过";
	}

	private String setResult() {
		if (data[0][index] != null && data[0][index].toString().contains("不通过") || data[1][index] != null && data[1][index].toString().contains("不通过")
				|| data[2][index] != null && data[2][index].toString().contains("不通过") || data[3][index] != null && data[3][index].toString().contains("不通过")
				|| data[4][index] != null && data[4][index].toString().contains("不通过") || data[5][index] != null && data[5][index].toString().contains("不通过")
				|| data[6][index] != null && data[6][index].toString().contains("不通过")) {
			return "不通过";
		}
		return "通过";
	}

	/**
	 * 牌停止
	 */
	private void doStep4() {
		System.out.println("begin doStep4 index is " + index);
		try {
			ChannelFuture cf = ClientMain.loginWin.getChannelFuture();
			ByteBuf cmdBuf2 = cf.channel().alloc().buffer();
			cmdBuf2.writeShort(ConstantValue.USERTYPE);
			cmdBuf2.writeShort(ConstantValue.SLEEPCARD);
			cmdBuf2.writeShort(ConstantValue.NULLREC);
			cmdBuf2.writeBytes(ConstantValue.strUserName.getBytes());// 10 bytes
			cmdBuf2.writeInt(0xFBFEBFEF);

			cf.channel().writeAndFlush(cmdBuf2);
			log += "下发停止命令成功\n";
			jTextArea1.setText(log);
			JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
			scrollBar.setValue(scrollBar.getMaximum());
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("end doStep4 index is " + index);
	}

	/**
	 * 主机上报休眠牌结果
	 * 
	 */
	public void ReceiveStep4() {
		System.out.println("ReceiveStep4 index is " + index);
		log += "收到停止应答\n";
		jTextArea1.setText(log);
		JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
		scrollBar.setValue(scrollBar.getMaximum());
		doNext();
	}

	public void doNext() {
		if (index >= 4) {
			doStep1(5);// 最后发一个05表示结束
			System.out.println("测试结束");
			this.saveToExcel();
			return;
		}
		index++;
		if (index == 2 && !jCheckBox2.isSelected()) {
			index++;
		}
		if (index == 3 && !jCheckBox3.isSelected()) {
			index++;
		}
		if (index == 4 && !jCheckBox4.isSelected()) {
			index++;
		}
		if (index > 4) {
			doStep1(5);// 最后发一个05表示结束
			System.out.println("下发测试结束");
			index = 1;
			return;
		}
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		log += "开始测试板" + index + "\n";
		jTextArea1.setText(log);
		JScrollBar scrollBar = jScrollPane1.getVerticalScrollBar();
		scrollBar.setValue(scrollBar.getMaximum());
		doStep1(index);// 电脑串口发测试命令
	}

	private void updateTable() {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
				model.setRowCount(0);
				model.setDataVector(data, new String[] { "", "", "", "", "" });
				jTable1.updateUI();
			}
		});
	}

	private void clearTable() {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
				model.setRowCount(0);
				data = new Object[][] { { "1 装置", null, null, null, null }, { "2 配码", null, null, null, null }, { "3 电压", null, null, null, null }, { "4 无线", null, null, null, null },
						{ "5 左边", null, null, null, null }, { "6 右边", null, null, null, null }, { "7 姿势", null, null, null, null }, { "8 总结果", null, null, null, null } };
				model.setDataVector(data, new String[] { "", "", "", "", "" });
				jTable1.updateUI();
			}
		});
	}

	/**
	 * 获取牌info
	 * 
	 * @param index
	 *            牌索引
	 */
	public ArrayList<Integer> getTileParameter(String strName) {
		ArrayList<Integer> retArrayList = new ArrayList<Integer>();
		for (Map<String, String> map : tileInfo.list) {
			for (Entry<String, String> entry : map.entrySet()) {
				if (entry.getValue().equals(strName)) {
					retArrayList.add(Integer.parseInt(map.get("编码"), 16));
					retArrayList.add(Integer.parseInt(map.get("11位互感码"), 16));
					retArrayList.add(Integer.parseInt(map.get("T-Report时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm起始0时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第一次设置1时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第二次设置0时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第三次设置1时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第四次设置0时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第五次设置1时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第六次设置0时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第七次设置1时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第八次设置0时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm第九次设置1时长"), 16));
					retArrayList.add(Integer.parseInt(map.get("pwm尾部设置0时长"), 16));
					return retArrayList;
				}
			}
		}
		return retArrayList;
	}

	/**
	 * 获取牌姿势
	 * 
	 * @param x
	 * @param y
	 * @param z
	 * @return
	 */
	public int getTileDirection(int x, int y, int z) {
		int idirection = 0;
		int MAX1 = 35;
		int MIN = 15;
		if ((z >= MAX1) && Math.abs(x) < MIN && Math.abs(y) < MIN) {
			idirection = ConstantValue.DOWNSIDE;
		} else if ((z <= 0 - MAX1) && Math.abs(x) < MIN && Math.abs(y) < MIN) {
			idirection = ConstantValue.UPSIDE;
		} else if (Math.abs(z) < MIN && ((Math.abs(x) >= MAX1) || (Math.abs(y) >= MAX1))) {
			idirection = ConstantValue.STAND1;// 站立
		} else {
			idirection = ConstantValue.MOVE;
		}

		return idirection;
	}

	public void setState1(int state) {
		if (state == 1) {
			this.jLabel4.setText("已启动");
			jLabel4.setForeground(java.awt.Color.black);
		} else {
			this.jLabel4.setText("未启动");
			jLabel4.setForeground(java.awt.Color.red);
		}
	}

	public void setState2(int state) {
		if (state == 1) {
			this.jLabel6.setText("已启动");
			jLabel6.setForeground(java.awt.Color.black);
		} else {
			this.jLabel6.setText("未启动");
			jLabel6.setForeground(java.awt.Color.red);
		}
	}
	
	private void saveToExcel() {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String currentDate = dateFormat.format(new Date());
		File file = new File("./report");
		if (!file.exists()) {
			file.mkdir();
		}
		String filePath = "./report/" + currentDate + ".xlsx";
		FileOutputStream out = null;
		XSSFWorkbook wb = null;
		Sheet sheet = null;
		try {
			File xlsx = new File(filePath);
			if (xlsx.exists()) {
				wb = new XSSFWorkbook(new FileInputStream(filePath));
				sheet = wb.getSheetAt(0);
			} else {
				wb = new XSSFWorkbook();
				sheet = wb.createSheet();
				setTableHead(wb, sheet);
			}
			sheet.setDefaultColumnWidth(10);
			sheet.setColumnWidth(5, 6000);
			sheet.setColumnWidth(6, 5000);
			sheet.setColumnWidth(7, 5000);
			sheet.setColumnWidth(8, 5000);
			int index = sheet.getLastRowNum() + 1;
			for (int i = 1; i <= 4; i++) {
				Row row = sheet.createRow((short) (sheet.getLastRowNum() + 1));
				row.createCell(0).setCellValue(String.valueOf(this.startIndex));
				row.createCell(1).setCellValue("板" + i);
				row.createCell(2).setCellValue(data[0][i] == null ? "" : String.valueOf(data[0][i]));
				row.createCell(3).setCellValue(data[1][i] == null ? "" : String.valueOf(data[1][i]));
				row.createCell(4).setCellValue(data[2][i] == null ? "" : String.valueOf(data[2][i]));
				row.createCell(5).setCellValue(data[3][i] == null ? "" : String.valueOf(data[3][i]));
				row.createCell(6).setCellValue(data[4][i] == null ? "" : String.valueOf(data[4][i]));
				row.createCell(7).setCellValue(data[5][i] == null ? "" : String.valueOf(data[5][i]));
				row.createCell(8).setCellValue(data[6][i] == null ? "" : String.valueOf(data[6][i]));
				creatCell(wb, row, 9, data[7][i] == null ? "" : String.valueOf(data[7][i]));
			}
			this.startIndex++;
			sheet.addMergedRegion(new CellRangeAddress(index, index + 3, 0, 0));
			out = new FileOutputStream(filePath);
			out.flush();
			wb.write(out);
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	private void setTableHead(XSSFWorkbook wb, Sheet sheet) {
		Row row = sheet.createRow(0);
		creatTabelCell(wb, row, 0, "编号");
		creatTabelCell(wb, row, 1, "板号");
		creatTabelCell(wb, row, 2, "装置");
		creatTabelCell(wb, row, 3, "配码");
		creatTabelCell(wb, row, 4, "电压");
		creatTabelCell(wb, row, 5, "无线");
		creatTabelCell(wb, row, 6, "左边");
		creatTabelCell(wb, row, 7, "右边");
		creatTabelCell(wb, row, 8, "姿势");
		creatTabelCell(wb, row, 9, "总结果");
	}

	private void creatTabelCell(XSSFWorkbook wb, Row row, int column, String value) {
		Cell cell = row.createCell(column);
		CellStyle style = wb.createCellStyle();
		style.setFillForegroundColor(IndexedColors.LIGHT_BLUE.index);
		style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
		cell.setCellStyle(style);
		cell.setCellValue(value);
	}
	
	private void creatCell(XSSFWorkbook wb, Row row, int column, String value) {
		Cell cell = row.createCell(column);
		if (value.contains("不通过")) {
			CellStyle style = wb.createCellStyle();
			style.setFillForegroundColor(IndexedColors.RED.getIndex());
			style.setFillPattern(FillPatternType.SOLID_FOREGROUND);
			cell.setCellStyle(style);
		}
		cell.setCellValue(value);
	}
	
	public static void getConfigXml() {
		try {
			File f = new File("./conf/configTest.xml");
			SAXReader reader = new SAXReader();
			Document doc = reader.read(f);
			Element root = doc.getRootElement();
			List<Element> elements = root.elements();
			for (Element e : elements) {
				if (e.attribute("key").getValue().equals("COM")) {
					com = e.attribute("value").getValue();
					break;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void setConfigXml() throws DocumentException, IOException {
		Document doc = DocumentHelper.createDocument();
		Element root = doc.addElement("root");
			Element element = root.addElement("param");
			element.addAttribute("key", "COM");
			element.addAttribute("value", jTextField1.getText().trim());

		FileOutputStream out = new FileOutputStream("./conf/configTest.xml");

		// 指定文本的写出的格式：
		OutputFormat format = OutputFormat.createPrettyPrint();
		format.setEncoding("UTF-8");
		XMLWriter writer = new XMLWriter(out, format);
		writer.write(doc);
		writer.close();
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
