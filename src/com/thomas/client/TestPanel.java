/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.thomas.client;

import com.thomas.data.ConstantValue;
import com.thomas.data.I单张牌数据;
import com.thomas.data.I牌堆行数据;
import com.thomas.data.Ulti;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author LongJing
 */
public class TestPanel extends javax.swing.JPanel {

	private static final long serialVersionUID = -1454982132547602005L;
	private int count = 0;// 计数
	private int size = 0;// 统计周期
	private boolean 是否开启统计 = false;
	private Map<String, Integer> cardMap;
    /**
     * Creates new form TestPanel
     */
    public TestPanel() {
        initComponents();
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        setBackground(new java.awt.Color(102, 102, 102));
        setMinimumSize(new java.awt.Dimension(1200, 700));
        setPreferredSize(new java.awt.Dimension(1200, 700));
        setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setMaximumSize(new java.awt.Dimension(1200, 50));
        jPanel2.setMinimumSize(new java.awt.Dimension(1200, 50));
        jPanel2.setPreferredSize(new java.awt.Dimension(1200, 50));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("统计周期:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jLabel1, gridBagConstraints);

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(5, 1, null, 1));
        jSpinner1.setMinimumSize(new java.awt.Dimension(60, 24));
        jSpinner1.setPreferredSize(new java.awt.Dimension(60, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jSpinner1, gridBagConstraints);

        jLabel2.setText("分钟 ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel4.setText("统计门限:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jLabel4, gridBagConstraints);

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel(98, 0, 100, 1));
        jSpinner2.setMinimumSize(new java.awt.Dimension(60, 24));
        jSpinner2.setPreferredSize(new java.awt.Dimension(60, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jSpinner2, gridBagConstraints);

        jLabel5.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel2.add(jLabel5, gridBagConstraints);

        jButton1.setText("统计");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jButton1, gridBagConstraints);

        jLabel3.setText("统计进度:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jLabel3, gridBagConstraints);

        jProgressBar1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jProgressBar1, gridBagConstraints);

        add(jPanel2, java.awt.BorderLayout.NORTH);

        jScrollPane1.setBackground(new java.awt.Color(102, 102, 102));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(new java.awt.GridBagLayout());
        jScrollPane1.setViewportView(jPanel1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		int time = (int) jSpinner1.getValue();
		jProgressBar1.setValue(0);
		size = 100 * time;
		count = 0;// 初始化计数
		是否开启统计 = true;
		cardMap = new HashMap();
    }//GEN-LAST:event_jButton1ActionPerformed

	public void showData(final ArrayList<I牌堆行数据> data) {
		jPanel1.removeAll();
		List<I牌堆行数据> copyData = Ulti.deepCopyList(data);
		this.sort1(copyData);
		final ArrayList<I牌堆行数据> temp = this.sort2(copyData);
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				try {
					for (int i = 0; i < temp.size(); i++) {
						I牌堆行数据 linedata = temp.get(i);
						JPanel panel = new JPanel();
						panel.setMinimumSize(new java.awt.Dimension(1200, 80));
						panel.setPreferredSize(new java.awt.Dimension(1200, 80));
						panel.setLayout(new java.awt.GridBagLayout());
						panel.setBackground(new java.awt.Color(102, 102, 102));
						GridBagConstraints gridBagConstraintsX = new GridBagConstraints();
						gridBagConstraintsX.gridx = 0;
						gridBagConstraintsX.gridy = i;
						jPanel1.add(panel, gridBagConstraintsX);
						String s = ".png";
						for (int j = 0; j < linedata.get牌数据().length; j++) {
							I单张牌数据 single = linedata.getItem(j);
							if (single.getDirection() == ConstantValue.UPSIDE) {
								s = ".png";
							} else {
								s = ".jpg";
							}
							// 根据牌码获取牌的显示
							String strName = ClientMain.getTileNameById(single.getTilecodeid());
							int k = 0;
							if (strName != null) {
								for (k = 0; k < ConstantValue.cardPicStrings2.length; k++) {
									if (strName.equals(ConstantValue.cardPicStrings2[k])) {
										break;
									}
								}
							}
							
							if (是否开启统计) {
								Integer sum = cardMap.get(ConstantValue.cardPicStrings3[k]);
								if (sum == null) {
									sum = new Integer(1);
								} else {
									sum = new Integer(sum.intValue() + 1);
								}
								cardMap.put(ConstantValue.cardPicStrings3[k], sum);
							}
							
							String index = "1";
							if (strName.endsWith("2")) {
								index = "2";
							} else if (strName.endsWith("3")) {
								index = "3";
							} else if (strName.endsWith("4")) {
								index = "4";
							}

							GridBagConstraints gridBagConstraintsY1 = new GridBagConstraints();
							gridBagConstraintsY1.gridx = j;
							gridBagConstraintsY1.gridy = 0;
							panel.add(new JLabel(new ImageIcon("./res/type_1/card_type_down/" + ClientPlayerPanel.cardPics[k] + s)), gridBagConstraintsY1);

							GridBagConstraints gridBagConstraintsY2 = new GridBagConstraints();
							gridBagConstraintsY2.gridx = j;
							gridBagConstraintsY2.gridy = 1;
							JLabel label = new JLabel(index);
							label.setForeground(new Color(255, 255, 255));
							panel.add(label, gridBagConstraintsY2);
						}
					}
					if (是否开启统计) {
						count++;
						jProgressBar1.setValue(count * 100 / size);
						if (count >= size) {
							是否开启统计 = false;
							final int 门限 = (int) jSpinner2.getValue();
							java.awt.EventQueue.invokeLater(new Runnable() {
								public void run() {
									TongJiDialog dialog = new TongJiDialog(size * 门限 / 100, cardMap);
									dialog.setVisible(true);
								}
					        });
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	private void sort1(List<I牌堆行数据> data) {
		for (int i = 0; i < data.size(); i++) {
			I牌堆行数据 linedata = data.get(i);
			if (linedata.get行中总牌数() == 0) {
				continue;
			}
			I单张牌数据 single1 = linedata.getItem(0);
			I单张牌数据 single2 = linedata.getItem(linedata.get行中总牌数() - 1);
			String strName1 = ClientMain.getTileNameById(single1.getTilecodeid());
			int k1 = 0;
			if (strName1 != null) {
				for (k1 = 0; k1 < ConstantValue.cardPicStrings2.length; k1++) {
					if (strName1.equals(ConstantValue.cardPicStrings2[k1])) {
						break;
					}
				}
			}
			String strName2 = ClientMain.getTileNameById(single2.getTilecodeid());
			int k2 = 0;
			if (strName2 != null) {
				for (k2 = 0; k2 < ConstantValue.cardPicStrings2.length; k2++) {
					if (strName2.equals(ConstantValue.cardPicStrings2[k2])) {
						break;
					}
				}
			}
			if (ClientPlayerPanel.cardPics[k1] > ClientPlayerPanel.cardPics[k2]) {
				data.set(i, linedata.revert());
			}
		}
	}

	private ArrayList<I牌堆行数据> sort2(List<I牌堆行数据> data) {
		ArrayList<I牌堆行数据> temp = new ArrayList<I牌堆行数据>();
		for (int i = 0; i < data.size(); i++) {
			I牌堆行数据 linedata = data.get(i);
			if (linedata.get行中总牌数() == 0) {
				continue;
			}
			if (temp.isEmpty()) {
				temp.add(linedata);
				continue;
			}
			this.sortAdd(temp, linedata);
		}
		return temp;
	}

	private void sortAdd(ArrayList<I牌堆行数据> temp, I牌堆行数据 linedata) {
		I单张牌数据 single2 = linedata.getItem(0);
		String strName2 = ClientMain.getTileNameById(single2.getTilecodeid());
		int k2 = 0;
		if (strName2 != null) {
			for (k2 = 0; k2 < ConstantValue.cardPicStrings2.length; k2++) {
				if (strName2.equals(ConstantValue.cardPicStrings2[k2])) {
					break;
				}
			}
		}
		for (int i = 0; i < temp.size(); i++) {
			I牌堆行数据 line = temp.get(i);
			I单张牌数据 single1 = line.getItem(0);
			String strName1 = ClientMain.getTileNameById(single1.getTilecodeid());
			int k1 = 0;
			if (strName1 != null) {
				for (k1 = 0; k1 < ConstantValue.cardPicStrings2.length; k1++) {
					if (strName1.equals(ConstantValue.cardPicStrings2[k1])) {
						break;
					}
				}
			}
			if (ClientPlayerPanel.cardPics[k1] > ClientPlayerPanel.cardPics[k2]) {
				temp.add(i, linedata);
				return;
			}
			if (i == temp.size() - 1) {
				temp.add(linedata);
				return;
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    // End of variables declaration//GEN-END:variables
}
